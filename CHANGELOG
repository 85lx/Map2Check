> [FILE:create_map.py] Created a option to generate a trace for all variables - checkout the label [CHANGE-DOT] in program
> [FILE:create_map.py] Added the type of the variables in the trace map
> [FILE:create_map.py] Get the var type in the Decl and save in an attribute and then put in the log
> [FILE:create_map.py] Created a function to sort the type of the variable according our style in C LIB API
> [FILE:create_map.py] Added the type of the variable in the map list
> [FILE:map2chek-fortes.py] Added an option to choose among the complete track or partial (default)
> [FILE:write_new_instance.py] Added type in the function to map the variable track in the function mark_map_FORTES
> [SOLVED] to write in the new instance the global var
> [FILE:check_safety_memory_FORTES.c] Deleted tmp file generate by trace log
> [FILE:create_map.py] Updated auxiliary scripts to receive -t option from map2chek-fortes.py
> [FILE:write_graml_output.py] Created example to generate graphml
> [FILE:write_graphml_output.py] Added the nodes to the graphml
> [FILE:create_map.py] Added the option to gerate the trace in GraphML format
> [FILE:create_map.py] Created a method to generate the token data for GraphML format
> [FILE:complete_check.py] Fixed bug related to choose the option --graphml-output
> [FILE:write_graphml_output.py] Added the data token atributes to graphml

> [FILE:check_safety_memory_FORTES.c] Updated the functions in LIB to handle with type of the var
                ::Updated the function PRINT_TRACE_LOG to read from file tmp log
                    - Updated the header
                ::HIP2 (DONE): Write each action in the map list in a tmp file

> [FILE:write_new_instance.py] Added in the map list the var name to give as input to LIB
> [FILE:create_map.py] When tokenizer the program we not consider blank lines
> [FILE: configure.py] Added networkx in the install process
> [FILE: configure.py] Added c-tokenizer-x86_64-linux.zip in the install process
> [FILE:check_safety_memory_FORTES.c] Executes os.remove("/tmp/tmp_map_currentlog.tmp") in the C library to avoid troubles with multiples executions
> [FILE:write_graphml_output.py] Set the graphml attributes according to SVCOMP model
> [FILE:write_graphml_output.py] Updated the graphml attribute, now only entry attribute is a string otherwise is like this "id0"
> [FILE:write_graphml_output.py] Added support to functions (enterFunction) in graphml
> [FILE:write_graphml_output.py] Validate the assumption write in case of pointer
    ::[SOLVED] BUG in log write about the pointers << The write log get the wrong pointer
> [FILE:create_map.py] Fixed bug to incorrect remove DIR_RESULT_CLAIMS+"/tmp_file_map.map"
> [FILE:create_map.py] Executed tests to generate graphml
> [FILE:create_map.py] Identified when the verification was VERIFICATION SUCCESSFUL and not create a graph, cuz is not possible
> [FILE:check_safety_memory_FORTES.c] Updated the print trace to "-" when is not possible to print the value
> [FILE:create_map.py] Fixed bug in ./map2check-fortes.py -a code_samples/memsafety_category_svcomp14/test-0019_false-valid-memtrack.c
      is not possible to get some var type - For strutures type is blank -- kernel problem self.get_current_type
> [FILE:create_map.py] Fixed Bug related to track of line number to original code. Test case: test-0019_1_false-valid-memtrack.c
        :: Data: In the moment to write the new code instance there are two ways to write the leak functions
> [FILE:write_graphml_output.py] Updated the rules to print the graphml when is -- in the variable values
> [FILE:create_map.py] Fixed Bug in witness/example0.c << colateral efect from last changes (points2leak)
> [FILE:create_map.py] Executed tested with CPAChecker in site examples
> [FILE:create_map.py] Created a option to generate a graphml from map2check output
> [FILE:run_training_svcomp.py] Updated script to generate a graphml from map2check output
>  [FILE:identify_points2leak] Fixed BUG related to deep search in compound and not compound AST nodes
> [FILE:create_map.py] Fixed bug related to -t to map all, is not map i++ incr.
> [FILE:create_map.py] Fixed bug related to map arrays pointers , e.g.,  a[i]++; that has not beem mapped.
    :: LOC 502 and 850
> [FILE:create_map.py] Added support to alloca C function
> [FILE:parse_2_claimsv1609.py] Updated rule "funInvalidPoint" to in claim translation
    :: Checking last rule
> [THE PROJECT] Removed ctags dependece >> http://ctags.sourceforge.net/
> [THE PROJECT] DONE: Checkout possibility to remmove ctags and networkx
> [FILE:run_training_svcomp_details.py] Updated unsafe to FAILED
> [FILE:run_training_svcomp_details.py] Updated TIMEOUT function
        :: What is generated in the program execution? -> The trace of the execution (if any failed)
        :: [SOLVED] BUG ::Is not generating correct the graphml
            :: Added CPAChecker
            :: Added the CPAChecker result in the HTML report
                :: /home/hbazure/drive/Docs/CPAChecker/trunk
> [FILE:create_map.py] Commented the partial support to alloc C function
> [FILE:run_training_svcomp_details.py] Log trace generate MemoryError
        :: The current trace log is generating a large graphml
            :: How reduce the number of nodes in the graph an th trace log
                :: [NOT USED] HIP1: Update library, before to write the file: (1) search (from bottom to up) in the list by line number and memory address,
                         if found replace in the actual log file by the current value. Create a regex based on the last values found
                         to line number and memory address and then replace all line txt match with the actual values of the list

                         :: To replace file:
                            (1) Create a string for regex
                            (2) Create a new string to write in the file
                            (3) Replace the line in the file by string in (2)

                :: [rejected] HIP 2: Try short in python
                    :: NOT WORK, cuz on the trace log in trace_of_program_exec_map2check.tmp file is arriving
                       in the experiments 11GB :(

                :: [USED] HIP 3: Create a complete list that have all trace as is write in the file, but in the end of the execution we
                          remove all duplicate values based on line number and the memory address
> [FILE:run_training_svcomp_details.py] Updated to improve the use of /tmp/trace_of_program_exec_map2check.tmp
            :: remove cat from /tmp/trace_of_program_exec_map2check.tmp
            :: [SOLVED] POSSIVEL BUG no novo trace. I had identified duplicated line trace
                - Update the delete of duplicate values based on line number and of the {variable name}
            :: [SOLVED] BUG to generate the GRAPHML in the script
                - the stderr was not written correctly


> [FILE:map2chek-fortes.py] Added new option --witnesspath
>[FILE:map2check_wrapper_script.sh] Updated according to new SVCOMP requirements
    :: Removed uncessary file when we have a Time Out
> [THE PROJECT] Created a new script to simulate the SVCOMP execution adopting map2check-wrapper.py
> [THE PROJECT] Updated actual branch to test in the server
> [THE PROJECT] Replaced the name of map2check-fortes.py by map2check.py

> [THE PROJECT] Removed tokenizer from configure.py
> [THE PROJECT] Added chmod +x to tokenizer
> [THE PROJECT] Removed unnecessary files from other_tools
> [THE PROJECT] Removed uncrustify from configure.py
    :: Removed the file of uncrustify now we get from the OS installed by the user


> [THE PROJECT] Updated map2check.py to not need of seetings.cfg file
> [THE PROJECT] Removed the use of configure.py - bkp in modules/not_used




> [THE PROJECT] Updating readme file
> [THE PROJECT] Thinking how avoid the tool execution if we have necessary packages not installed


> [THE PROJECT] Dealing with alloc C function. The actual project status generates false positives cuz the alloc function
    :: HIP1: Adding a filed in mapping to identify what is the allocation function adopted, this way we can write a correct
            leak asssertion to.

> [THE PROJECT] Creating an analysis to improve the use of __VERIFIER_nondet_int(). E.g., in cstrncat_alloc.c
    is adopted to determine the size of array
    ::HIP1: Creating a static analysis to determine what kid of __VERIFIER_nondet_int() should be, such as:
            (1) 0 or 1 to whiles and fors, or
            (2) the array size os vars







> [THE PROJECT] TODO: install test in diferent PCs
> [THE PROJECT] Checking ESBMC cuz this apt-get install libc6-dev-i386

> [FILE:create_map.py] Otimizing the time execution of args parse. The average time is 0.5s (this maybe is high)

> [FILE:create_map.py] TODO: Analyzing print in the trace log about arrays
        :: Data: in this Decl int z[4]={2,6,1,9}; is presented in the trace z = 2; :(
            ::HIP1: Try ignore the Decl put --, and for assignments consider map this a[i]
        :: In case of dynamic arrays using malloc we have a address pointed, and is not printed in the graphml :(
        :: Q1: The bench in SVCOMP adopting arrays?


> [FILE:create_map.py] Testing option of Map2Check
> [FILE:write_graphml_output.py] Testing graphml generated and the impact of not support to returnFrom


> [FILE:create_map.py] TODO: Checking if is really need to identify what to print in the map list
> [FILE:create_map.py] TODO: Fixing BUG in example4.c we do catch the error
> [FILE:create_map.py] TODO: Adding in the map list a parameter to know when is to print the variable values






> [FILE:write_graphml_output.py] TODO: Update the assumption attribute to correct form
> [FILE:write_graphml_output.py] TODO: Validate the assumption write in case of arrays
    ::BUG-ARRAY to print the array values from memory address
> [FILE:create_map.py] TODO: in the complete trace add the loop assignment, such as: i++

TO test with CPAChecker:

$ scripts/cpa.sh -64 -explicitAnalysis-NoRefiner -setprop analysis.checkCounterexamples=false -setprop cpa.value.merge=SEP -setprop cfa.useMultiEdges=false -setprop parser.transformTokensToLines=true -spec witness_format/example0.graphml -spec PropertyERROR.prp witness_format/example0.c





> [THE PROJECT] (only for future) FIxing Bug in validate the grahml in CPAChecker <<< ONLY IN THE SCRIPT TEST :(
    scripts/cpa.sh -preprocess -sv-comp14--memorysafety -spec config/specification/cpalien-leaks.spc -spec config/specification/TerminatingFunctions.spc -setprop cfa.useMultiEdges=false -setprop parser.transformTokensToLines=true -spec
> [FILE:check_safety_memory_FORTES.c] BUG in void print_debug(LIST_DYN_OBJ_FORTES *list); is not print correct


------------------------------------------
# For future

# TODO:
#   1) Create a documentation for each function
#   2) Check nomaclature according paper
#   3) Checkout that in the claim function to VALID_OBJECT
# $$$$$$$$$$$$$$$ Create function nondet in library
# DOING:
#   1) Alpha test
#       -> BUG FOUND: to write the new instance when exit commands are comments
#       -> BUG FOUND: // FORTES: Claim 11 assert((i - 1 >= 0));
#       -> BUG FOUND:
#Claim 1:
#  file code_samples/false_free_3.c line 15 function main
#  dereference failure: free() of non-dynamic memory
#  !(SAME-OBJECT(B, &C))
#       -> BUG FOUND: When we apply the program directly in a file, ex. ./prog <file.c>
#
# CRITICAL BUG: ajustar o mapemento p identificar se uma var global esta fora das funções $$$$$$$$$$$$
#   HIP: com base nos dados do escopo das funções, verificar se a num da linha esta fora deste escopo


