> [FILE:create_map.py] Created a option to generate a trace for all variables - checkout the label [CHANGE-DOT] in program
> [FILE:create_map.py] Added the type of the variables in the trace map
> [FILE:create_map.py] Get the var type in the Decl and save in an attribute and then put in the log
> [FILE:create_map.py] Created a function to sort the type of the variable according our style in C LIB API
> [FILE:create_map.py] Added the type of the variable in the map list
> [FILE:map2chek-fortes.py] Added an option to choose among the complete track or partial (default)
> [FILE:write_new_instance.py] Added type in the function to map the variable track in the function mark_map_FORTES
> [SOLVED] to write in the new instance the global var
> [FILE:check_safety_memory_FORTES.c] Deleted tmp file generate by trace log
> [FILE:create_map.py] Updated auxiliary scripts to receive -t option from map2chek-fortes.py
> [FILE:write_graml_output.py] Created example to generate graphml
> [FILE:write_graphml_output.py] Added the nodes to the graphml
> [FILE:create_map.py] Added the option to gerate the trace in GraphML format
> [FILE:create_map.py] Created a method to generate the token data for GraphML format
> [FILE:complete_check.py] Fixed bug related to choose the option --graphml-output
> [FILE:write_graphml_output.py] Added the data token atributes to graphml
> [FILE:check_safety_memory_FORTES.c] Updated the functions in LIB to handle with type of the var
                ::Updated the function PRINT_TRACE_LOG to read from file tmp log
                    - Updated the header
                ::HIP2 (DONE): Write each action in the map list in a tmp file
> [FILE:write_new_instance.py] Added in the map list the var name to give as input to LIB
> [FILE:create_map.py] When tokenizer the program we not consider blank lines
> [FILE: configure.py] Added networkx in the install process
> [FILE: configure.py] Added c-tokenizer-x86_64-linux.zip in the install process
> [FILE:check_safety_memory_FORTES.c] Executes os.remove("/tmp/tmp_map_currentlog.tmp") in the C library to avoid troubles with multiples executions
> [FILE:write_graphml_output.py] Set the graphml attributes according to SVCOMP model
> [FILE:write_graphml_output.py] Updated the graphml attribute, now only entry attribute is a string otherwise is like this "id0"
> [FILE:write_graphml_output.py] Added support to functions (enterFunction) in graphml
> [FILE:write_graphml_output.py] Validate the assumption write in case of pointer
    ::[SOLVED] BUG in log write about the pointers << The write log get the wrong pointer
> [FILE:create_map.py] Fixed bug to incorrect remove DIR_RESULT_CLAIMS+"/tmp_file_map.map"
> [FILE:create_map.py] Executed tests to generate graphml
> [FILE:create_map.py] Identified when the verification was VERIFICATION SUCCESSFUL and not create a graph, cuz is not possible
> [FILE:check_safety_memory_FORTES.c] Updated the print trace to "-" when is not possible to print the value
> [FILE:create_map.py] Fixed bug in ./map2check-fortes.py -a code_samples/memsafety_category_svcomp14/test-0019_false-valid-memtrack.c
      is not possible to get some var type - For strutures type is blank -- kernel problem self.get_current_type
> [FILE:create_map.py] Fixed Bug related to track of line number to original code. Test case: test-0019_1_false-valid-memtrack.c
        :: Data: In the moment to write the new code instance there are two ways to write the leak functions
> [FILE:write_graphml_output.py] Updated the rules to print the graphml when is -- in the variable values
> [FILE:create_map.py] Fixed Bug in witness/example0.c << colateral efect from last changes (points2leak)
> [FILE:create_map.py] Executed tested with CPAChecker in site examples


> [FILE:create_map.py] Created a option to generate a graphml from map2check output
>[run_training_svcomp.py] Updated script to generate a graphml from map2check output


> [FILE:create_map.py] Otimizing the time execution of args parse. The average time is 0.5s (this maybe is high)


> [FILE:create_map.py] TODO: Analyzing print in the trace log about arrays
        :: Data: in this Decl int z[4]={2,6,1,9}; is presented in the trace z = 2; :(
            ::HIP1: Try ignore the Decl put --, and for assignments consider map this a[i]
        :: In case of dynamic arrays using malloc we have a address pointed, and is not printed in the graphml :(
        :: Q1: The bench in SVCOMP adopting arrays?


> [FILE:create_map.py] Testing option of Map2Check
> [FILE:write_graphml_output.py] Testing graphml generated and the impact of not support to returnFrom

> [FILE:??????] Doing a script to simulate the SVCOMP execution call the wrapper script


> [FILE:create_map.py] TODO: Checking if is really need to identify what to print in the map list
> [FILE:create_map.py] TODO: Fixing BUG in example4.c we do catch the error
> [FILE:create_map.py] TODO: Adding in the map list a parameter to know when is to print the variable values






> [FILE:write_graphml_output.py] TODO: Update the assumption attribute to correct form
> [FILE:write_graphml_output.py] TODO: Validate the assumption write in case of arrays
    ::BUG-ARRAY to print the array values from memory address
> [FILE:create_map.py] TODO: in the complete trace add the loop assignment, such as: i++

TO test with CPAChecker:

$ scripts/cpa.sh -64 -explicitAnalysis-NoRefiner -setprop analysis.checkCounterexamples=false -setprop cpa.value.merge=SEP -setprop cfa.useMultiEdges=false -setprop parser.transformTokensToLines=true -spec witness_format/example0.graphml -spec PropertyERROR.prp witness_format/example0.c






> [FILE:check_safety_memory_FORTES.c] BUG in void print_debug(LIST_DYN_OBJ_FORTES *list); is not print correct





