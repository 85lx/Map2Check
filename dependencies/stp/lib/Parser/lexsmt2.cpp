#line 2 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/lexsmt2.cpp"

#line 4 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/lexsmt2.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer smt2_create_buffer
#define yy_delete_buffer smt2_delete_buffer
#define yy_flex_debug smt2_flex_debug
#define yy_init_buffer smt2_init_buffer
#define yy_flush_buffer smt2_flush_buffer
#define yy_load_buffer_state smt2_load_buffer_state
#define yy_switch_to_buffer smt2_switch_to_buffer
#define yyin smt2in
#define yyleng smt2leng
#define yylex smt2lex
#define yylineno smt2lineno
#define yyout smt2out
#define yyrestart smt2restart
#define yytext smt2text
#define yywrap smt2wrap
#define yyalloc smt2alloc
#define yyrealloc smt2realloc
#define yyfree smt2free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 1
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE smt2restart(smt2in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int smt2leng;

extern FILE *smt2in, *smt2out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE smt2lex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-smt2lineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < smt2leng; ++yyl )\
                    if ( smt2text[yyl] == '\n' )\
                        --smt2lineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --smt2lineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up smt2text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up smt2text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via smt2restart()), so that the user can continue scanning by
	 * just pointing smt2in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when smt2text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int smt2leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow smt2wrap()'s to do buffer switches
 * instead of setting up a fresh smt2in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void smt2restart (FILE *input_file  );
void smt2_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE smt2_create_buffer (FILE *file,int size  );
void smt2_delete_buffer (YY_BUFFER_STATE b  );
void smt2_flush_buffer (YY_BUFFER_STATE b  );
void smt2push_buffer_state (YY_BUFFER_STATE new_buffer  );
void smt2pop_buffer_state (void );

static void smt2ensure_buffer_stack (void );
static void smt2_load_buffer_state (void );
static void smt2_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER smt2_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE smt2_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE smt2_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE smt2_scan_bytes (yyconst char *bytes,int len  );

void *smt2alloc (yy_size_t  );
void *smt2realloc (void *,yy_size_t  );
void smt2free (void *  );

#define yy_new_buffer smt2_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        smt2ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            smt2_create_buffer(smt2in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        smt2ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            smt2_create_buffer(smt2in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define smt2wrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *smt2in = NULL, *smt2out = NULL;

typedef int yy_state_type;

extern int smt2lineno;

int smt2lineno = 1;

extern char *smt2text;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr smt2text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yynoreturn yy_fatal_error (yyconst char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up smt2text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	smt2leng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 108
#define YY_END_OF_BUFFER 109
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[448] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,  109,  107,
        1,    1,   18,   10,  107,  105,   15,   16,    2,   19,
        7,   64,  105,  105,   17,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  107,    9,    8,   13,   14,   12,  108,  105,
        0,    0,    0,    2,    0,    0,    0,    0,   65,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,   61,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,    0,    0,  106,
       11,    4,    5,    6,    0,    0,    0,    0,    0,    0,

      105,  105,  105,   60,  105,    3,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,   63,   67,   59,   47,  105,
      105,  105,  105,  105,  105,  105,  105,  105,   62,  105,
        0,    0,    0,    0,    0,    0,  105,  105,   56,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,   82,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,   36,   37,
      105,  105,  105,   48,  105,  105,  105,  105,  105,  105,
      105,   57,  105,    0,    0,    0,    0,    0,    0,   55,

      105,  105,   71,   81,  105,  105,  105,   74,  105,   80,
       85,   73,  105,   96,   94,   68,   95,   93,  105,  105,
       72,  105,   92,   90,   91,   89,  105,  105,   83,  105,
      105,  105,  105,  105,  105,   58,  105,  105,  105,  105,
      105,  105,  105,  105,   49,  105,  105,  105,  105,  105,
      105,  104,  105,    0,    0,   25,    0,    0,    0,   54,
       26,   70,   97,   69,   84,   76,   79,   78,   75,   77,
       86,  105,   87,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  100,  105,  105,  103,  105,  105,
      105,  105,  105,    0,    0,    0,   20,   24,  105,  105,

      105,  105,   88,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,    0,    0,    0,
      105,  105,  105,  105,   66,  105,  105,   40,  105,  105,
      105,  105,  105,  105,  105,  105,   51,  105,  105,  105,
      105,   21,    0,    0,   27,  105,  105,  105,  105,  105,
      105,  105,   41,  105,   43,  105,   46,  105,  105,  105,
       52,  105,  105,  105,    0,    0,  105,  105,  105,  105,
       32,  105,  105,  105,   42,  105,  105,  105,  105,   53,
      105,  105,   22,    0,  105,  105,   30,  105,  105,  105,
       35,  105,  105,  105,  105,  105,  101,  105,   99,   98,

        0,  105,  105,   31,  105,  105,  105,  105,  105,  105,
      105,  102,    0,  105,   29,  105,  105,  105,  105,  105,
      105,  105,    0,  105,   33,  105,   38,   39,  105,   45,
      105,    0,  105,   34,  105,  105,   23,  105,  105,   50,
      105,  105,   28,  105,  105,   44,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    7,    7,    1,    8,
        9,    7,    7,    1,   10,   11,    7,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,   14,    7,
       15,   16,    7,    7,   17,   18,   19,   19,   19,   19,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   21,   20,   20,   20,   20,
        1,    1,    1,    7,   22,    1,   23,   24,   25,   26,

       27,   28,   29,   30,   31,   20,   32,   33,   34,   35,
       36,   37,   20,   38,   39,   40,   41,   42,   20,   43,
       44,   45,    1,   46,    1,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_uint16_t yy_base[454] =
    {   0,
        0,    0,  683,  682,   44,   45,    0,    0,  684,  687,
      687,  687,    0,  687,   27,    0,  687,  687,   41,   29,
      687,  667,  644,   25,    0,   23,  639,   27,   38,   34,
      657,  652,  638,  650,  640,  637,   30,   40,   47,  636,
      637,  645,   57,  687,  687,  687,  687,  666,  687,    0,
      658,    0,  657,   61,  645,  636,  643,   45,    0,  627,
      624,  627,  636,  622,   92,  633,  624,   55,  619,  627,
       44,  623,  615,  627,  613,  612,    0,  614,  611,   49,
      609,   49,  619,  611,  605,  607,  606,   88,   90,  687,
      687,  631,    0,  630,  601,  612,  605,  598,  596,  613,

      612,  613,  600,    0,  605,  619,   66,  594,  590,  587,
       71,  589,  111,   73,   60,  601,  600,  591,  592,  582,
      585,  580,  581,  579,  607,    0,    0,    0,    0,  586,
      588,  587,  590,  585,  601,  575,  571,  581,    0,  571,
      579,  577,  577,  593,  564,  561,  556,  572,    0,  560,
      571,  570,  565,  560,  563,  559,  556,  561,   70,    0,
      558,   73,  555,   82,  551,  559,  561,  553,   89,   92,
      556,  546,  543,  548,  556,  555,  542,  545,    0,    0,
      552,  547,  130,    0,  550,  532,  531,  545,   87,  547,
      541,    0,  545,  537,  534,  538,  530,  537,  520,    0,

      535,  519,    0,    0,  520,  520,  518,    0,  529,    0,
        0,    0,  512,    0,    0,    0,    0,    0,  527,  518,
        0,  509,    0,    0,    0,    0,  516,  511,    0,  538,
      507,  508,  518,  509,  518,    0,  503,  506,  504,  502,
      500,  502,  513,  495,  524,  506,  492,  496,  494,  492,
      501,    0,  500,  490,  500,  687,  493,  496,  483,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  482,    0,  493,  509,  493,  477,  477,  487,  488,
      473,  476,  472,  477,    0,  486,  486,    0,  479,  477,
      465,  461,  460,  464,  460,  476,  687,  687,  476,  488,

      111,  457,    0,  111,  460,  468,  463,  457,  469,  450,
      451,  110,  453,  457,  456,  446,  445,  440,  450,  472,
      441,  126,  439,  443,    0,  440,  448,    0,  443,  439,
      446,  433,  445,  432,  443,  438,    0,  443,  431,  439,
      438,  687,  424,  421,  452,  425,  419,  423,  423,  419,
      416,  420,    0,  419,    0,  443,    0,  425,  423,  421,
        0,  414,  413,  412,  402,  418,  421,  408,  407,  403,
      120,  400,  408,  404,    0,   89,  399,  396,  405,    0,
      408,  407,  687,  394,  392,  391,    0,  389,  390,  417,
        0,  390,  398,  385,  387,  382,    0,  381,    0,    0,

      381,  380,  378,    0,  390,  378,  374,  373,  368,  365,
      371,    0,  370,  359,    0,  296,  293,  277,  275,  272,
      285,  134,  133,  134,    0,  138,    0,    0,  128,    0,
      125,  123,  126,    0,  119,  116,  687,  112,  106,    0,
       95,   90,    0,   61,   55,    0,  687,  172,  218,  264,
      307,  352,  387
    } ;

static yyconst flex_int16_t yy_def[454] =
    {   0,
      447,    1,  448,  448,  449,  449,  450,  450,  447,  447,
      447,  447,  451,  447,  447,  451,  447,  447,  447,  447,
      447,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  452,  447,  447,  447,  447,  447,  447,  451,
      447,  453,  447,  447,  447,  447,  447,  447,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  452,  452,  447,
      447,  447,  453,  447,  447,  447,  447,  447,  447,  447,

      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      447,  447,  447,  447,  447,  447,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  447,  447,  447,  447,  447,  447,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  447,  447,  447,  447,  447,  447,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  447,  447,  447,  447,  447,  451,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  447,  447,  447,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  447,  447,  447,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  447,  447,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  447,  447,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,

      447,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  447,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  447,  451,  451,  451,  451,  451,  451,  451,
      451,  447,  451,  451,  451,  451,  447,  451,  451,  451,
      451,  451,  451,  451,  451,  451,    0,  447,  447,  447,
      447,  447,  447
    } ;

static yyconst flex_uint16_t yy_nxt[734] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   16,
       16,   19,   20,   21,   22,   16,   23,   24,   16,   16,
       16,   25,   26,   27,   28,   29,   30,   31,   32,   16,
       33,   16,   34,   16,   35,   36,   37,   38,   39,   40,
       16,   16,   41,   16,   42,   43,   47,   47,   48,   48,
       51,   53,   54,   55,   56,   61,   66,   63,   70,   89,
       62,   64,   67,   57,   68,   78,   80,   58,   69,   52,
       79,   53,   54,   82,  122,   81,   71,   83,   98,  118,
       99,  134,  119,  123,  100,  131,   84,  132,  135,  446,
       89,  151,   89,  157,  172,  173,  445,  158,  168,  214,

      152,  169,   90,  106,  153,  170,  159,  211,  217,  212,
      171,  394,  215,  395,  107,  223,  108,  248,  225,  249,
      444,  218,  250,  443,  109,  110,  111,  112,  224,  389,
      113,  226,  114,   90,  115,   90,  161,  326,  323,  162,
      163,  327,  335,  164,  165,  442,  441,  336,  166,  324,
      346,  167,  237,  347,  440,  439,  438,  437,  390,  436,
      238,  435,  434,  239,  348,  240,  241,  433,  432,  431,
      242,  243,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,

       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,

       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       50,  430,  429,   50,  428,  427,   50,   50,   50,  426,
      425,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   93,  424,

      423,  422,  421,   93,   93,   93,  420,  419,  418,   93,
       93,   93,   93,   93,   93,  417,  416,  415,  414,  413,
      412,  411,  410,  409,  408,  407,  406,  405,  404,  403,
      402,  401,  400,  399,  398,  397,  396,  393,  392,  391,
      388,  387,  386,  385,  384,  383,  382,  381,  380,  379,
      378,  377,  376,  375,  374,  373,  372,  371,  370,  369,
      368,  367,  366,  365,  364,  363,  362,  361,  360,  359,
      358,  357,  356,  355,  354,  353,  352,  351,  350,  349,
      345,  344,  343,  342,  341,  340,  339,  338,  337,  334,
      333,  332,  331,  330,  329,  328,  325,  322,  321,  320,

      319,  318,  317,  316,  315,  314,  313,  312,  311,  310,
      309,  308,  307,  306,  305,  304,  303,  302,  301,  300,
      299,  298,  297,  296,  295,  294,  293,  292,  291,  290,
      289,  288,  287,  286,  285,  284,  283,  282,  281,  280,
      279,  278,  277,  276,  275,  274,  273,  272,  271,  270,
      269,  268,  267,  266,  265,  264,  263,  262,  261,  260,
      259,  258,  257,  256,  255,  254,  253,  252,  251,  247,
      246,  245,  244,  236,  235,  234,  233,  232,  231,  230,
      229,  228,  227,  222,  221,  220,  219,  216,  213,  210,
      209,  208,  207,  206,  205,  204,  203,  202,  201,  200,

      199,  198,  197,  196,  195,  194,  193,  192,  191,  190,
      189,  188,  187,  186,  185,  184,  183,  182,  181,  180,
      179,  178,  177,  176,  175,  174,  160,  156,  155,  154,
      106,  150,  149,  148,  147,  146,  145,  144,  143,  142,
      141,   94,   92,  140,  139,  138,  137,  136,  133,  130,
      129,  128,  127,  126,  125,  124,  121,  120,  117,  116,
      105,  104,  103,  102,  101,   97,   96,   95,   94,   92,
       91,   87,   86,   85,   77,   76,   75,   74,   73,   72,
       65,   60,   59,  447,   45,   45,    9,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,

      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447
    } ;

static yyconst flex_int16_t yy_chk[734] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    6,    5,    6,
       15,   19,   19,   20,   20,   24,   28,   26,   30,   43,
       24,   26,   28,   20,   29,   37,   38,   20,   29,   15,
       37,   54,   54,   39,   71,   38,   30,   39,   58,   68,
       58,   82,   68,   71,   58,   80,   39,   80,   82,  445,
       88,  107,   89,  111,  115,  115,  444,  111,  114,  162,

      107,  114,   43,   65,  107,  114,  111,  159,  164,  159,
      114,  376,  162,  376,   65,  169,   65,  189,  170,  189,
      442,  164,  189,  441,   65,   65,   65,   65,  169,  371,
       65,  170,   65,   88,   65,   89,  113,  304,  301,  113,
      113,  304,  312,  113,  113,  439,  438,  312,  113,  301,
      322,  113,  183,  322,  436,  435,  433,  432,  371,  431,
      183,  429,  426,  183,  322,  183,  183,  424,  423,  422,
      183,  183,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,

      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,

      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      451,  421,  420,  451,  419,  418,  451,  451,  451,  417,
      416,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  453,  414,

      413,  411,  410,  453,  453,  453,  409,  408,  407,  453,
      453,  453,  453,  453,  453,  406,  405,  403,  402,  401,
      398,  396,  395,  394,  393,  392,  390,  389,  388,  386,
      385,  384,  382,  381,  379,  378,  377,  374,  373,  372,
      370,  369,  368,  367,  366,  365,  364,  363,  362,  360,
      359,  358,  356,  354,  352,  351,  350,  349,  348,  347,
      346,  345,  344,  343,  341,  340,  339,  338,  336,  335,
      334,  333,  332,  331,  330,  329,  327,  326,  324,  323,
      321,  320,  319,  318,  317,  316,  315,  314,  313,  311,
      310,  309,  308,  307,  306,  305,  302,  300,  299,  296,

      295,  294,  293,  292,  291,  290,  289,  287,  286,  284,
      283,  282,  281,  280,  279,  278,  277,  276,  275,  274,
      272,  259,  258,  257,  255,  254,  253,  251,  250,  249,
      248,  247,  246,  245,  244,  243,  242,  241,  240,  239,
      238,  237,  235,  234,  233,  232,  231,  230,  228,  227,
      222,  220,  219,  213,  209,  207,  206,  205,  202,  201,
      199,  198,  197,  196,  195,  194,  193,  191,  190,  188,
      187,  186,  185,  182,  181,  178,  177,  176,  175,  174,
      173,  172,  171,  168,  167,  166,  165,  163,  161,  158,
      157,  156,  155,  154,  153,  152,  151,  150,  148,  147,

      146,  145,  144,  143,  142,  141,  140,  138,  137,  136,
      135,  134,  133,  132,  131,  130,  125,  124,  123,  122,
      121,  120,  119,  118,  117,  116,  112,  110,  109,  108,
      106,  105,  103,  102,  101,  100,   99,   98,   97,   96,
       95,   94,   92,   87,   86,   85,   84,   83,   81,   79,
       78,   76,   75,   74,   73,   72,   70,   69,   67,   66,
       64,   63,   62,   61,   60,   57,   56,   55,   53,   51,
       48,   42,   41,   40,   36,   35,   34,   33,   32,   31,
       27,   23,   22,    9,    4,    3,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,

      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[109] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int smt2_flex_debug;
int smt2_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *smt2text;
#line 1 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
#line 2 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
  /********************************************************************
   * AUTHORS:  Trevor Hansen
   *
   * BEGIN DATE: May, 2010
   *
   * This file is modified version of the STP's smtlib.lex file. Please
   * see CVCL license below
   ********************************************************************/

  /********************************************************************
   * AUTHORS: Trevor Hansen, Vijay Ganesh, David L. Dill
   *
   * BEGIN DATE: July, 2006
   *
   * This file is modified version of the CVCL's smtlib.lex file. Please
   * see CVCL license below
   ********************************************************************/
   
  /********************************************************************
   * \file smtlib.lex
   * 
   * Author: Sergey Berezin, Clark Barrett
   * 
   * Created: Apr 30 2005
   *
   * <hr>
   * Copyright (C) 2004 by the Board of Trustees of Leland Stanford
   * Junior University and by New York University. 
   *
   * License to use, copy, modify, sell and/or distribute this software
   * and its documentation for any purpose is hereby granted without
   * royalty, subject to the terms and conditions defined in the \ref
   * LICENSE file provided with this distribution.  In particular:
   *
   * - The above copyright notice and this permission notice must appear
   * in all copies of the software and related documentation.
   *
   * - THE SOFTWARE IS PROVIDED "AS-IS", WITHOUT ANY WARRANTIES,
   * EXPRESSED OR IMPLIED.  USE IT AT YOUR OWN RISK.
   * 
   * <hr>
   ********************************************************************/
#include "stp/Parser/parser.h"
#include "parsesmt2.hpp"
#include "stp/cpp_interface.h"

  extern char *smt2text;
  extern int smt2error (const char *msg);

#ifdef _MSC_VER
  #include <io.h>
  int isatty(int fd) { return _isatty(fd); }
#endif

  // File-static (local to this file) variables and functions
  static std::string _string_lit;  
   
  static int lookup(char* s)
  {
    char * cleaned = NULL;
    size_t len;

    // The SMTLIB2 specifications sez that the outter bars aren't part of the
    // name. This means that we can create an empty string symbol name.
    if (s[0] == '|' && s[(len = strlen(s))-1] == '|')
      {
        cleaned = (char*) malloc(len);
        strncpy(cleaned,s+1,len-2); // chop off first and last characters.
        cleaned[len-2] = '\0';
        s = cleaned;
      }

    stp::ASTNode nptr;
    bool found = false;
    
    if (stp::GlobalParserInterface->LookupSymbol(s,nptr)) // it's a symbol.
    {
      found = true;
    }
    else if (stp::GlobalParserInterface->letMgr->isLetDeclared(s)) // a let.
    {
      nptr = stp::GlobalParserInterface->letMgr->resolveLet(s);
      found = true;
    }
    else if (stp::GlobalParserInterface->isBitVectorFunction(s))
    {
      smt2lval.str = new std::string(s);
      if (cleaned) 
        free (cleaned);
      return  BITVECTOR_FUNCTIONID_TOK;
    }
    else if (stp::GlobalParserInterface->isBooleanFunction(s))
    {
       smt2lval.str = new std::string(s);
       if (cleaned) 
         free (cleaned);
       return  BOOLEAN_FUNCTIONID_TOK;
    }
   
    if (found)
    {
       if (cleaned) 
         free (cleaned);

      // Check valuesize to see if it's a prop var.  I don't like doing
      // type determination in the lexer, but it's easier than rewriting
      // the whole grammar to eliminate the term/formula distinction.  
      smt2lval.node = stp::GlobalParserInterface->newNode(nptr);
      if ((smt2lval.node)->GetType() == stp::BOOLEAN_TYPE)
        return FORMID_TOK;
      else 
        return TERMID_TOK;
    }
    else
    {
      // it has not been seen before.
      smt2lval.str = new std::string(s);
      if (cleaned) 
        free (cleaned);
      return STRING_TOK;
    }
  }



#line 929 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/lexsmt2.cpp"

#define INITIAL 0
#define COMMENT 1
#define STRING_LITERAL 2
#define SYMBOL 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int smt2lex_destroy (void );

int smt2get_debug (void );

void smt2set_debug (int debug_flag  );

YY_EXTRA_TYPE smt2get_extra (void );

void smt2set_extra (YY_EXTRA_TYPE user_defined  );

FILE *smt2get_in (void );

void smt2set_in  (FILE * _in_str  );

FILE *smt2get_out (void );

void smt2set_out  (FILE * _out_str  );

			int smt2get_leng (void );

char *smt2get_text (void );

int smt2get_lineno (void );

void smt2set_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int smt2wrap (void );
#else
extern int smt2wrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( smt2text, (size_t) smt2leng, 1, smt2out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( smt2in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( smt2in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, max_size, smt2in))==0 && ferror(smt2in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(smt2in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int smt2lex (void);

#define YY_DECL int smt2lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after smt2text and smt2leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! smt2in )
			smt2in = stdin;

		if ( ! smt2out )
			smt2out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			smt2ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				smt2_create_buffer(smt2in,YY_BUF_SIZE );
		}

		smt2_load_buffer_state( );
		}

	{
#line 143 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"

#line 1150 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/lexsmt2.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of smt2text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 687 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < smt2leng; ++yyl )
				if ( smt2text[yyl] == '\n' )
					
    smt2lineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 144 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ /* sk'ip whitespace */ }
	YY_BREAK
/* We limit numerals to maxint, in the specification they are arbitary precision.*/
case 2:
YY_RULE_SETUP
#line 147 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ smt2lval.uintval = strtoul(smt2text, NULL, 10); return NUMERAL_TOK; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 149 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ smt2lval.str = new std::string(smt2text+2); return BVCONST_DECIMAL_TOK; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 150 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ smt2lval.str = new std::string(smt2text+2); return BVCONST_BINARY_TOK; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 151 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ smt2lval.str = new std::string(smt2text+2); return BVCONST_HEXIDECIMAL_TOK; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 153 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return DECIMAL_TOK;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 155 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ BEGIN COMMENT; }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 156 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ BEGIN INITIAL; /* return to normal mode */}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 157 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ /* stay in comment mode */ }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 159 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ BEGIN STRING_LITERAL;
                          _string_lit.erase(_string_lit.begin(),
                                            _string_lit.end()); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 162 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ /* double quote is the only escape. */
                          _string_lit.insert(_string_lit.end(),'"'); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 164 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ BEGIN INITIAL; 
			  smt2lval.str = new std::string(_string_lit);
                          return STRING_TOK; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 167 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ _string_lit.insert(_string_lit.end(),*smt2text); }                           
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 168 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ _string_lit.insert(_string_lit.end(),*smt2text); }
	YY_BREAK
/* Valid character are: ~ ! @ # $ % ^ & * _ - + = | \ : ; " < > . ? / ( )     */
case 15:
YY_RULE_SETUP
#line 171 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return LPAREN_TOK; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 172 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return RPAREN_TOK; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 173 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return UNDERSCORE_TOK; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 174 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return EXCLAIMATION_MARK_TOK; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 175 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return COLON_TOK; }
	YY_BREAK
/* Set info types */
/* This is a very restricted set of the possible keywords */
case 20:
YY_RULE_SETUP
#line 179 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return SOURCE_TOK;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 180 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return CATEGORY_TOK;} 
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 181 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return DIFFICULTY_TOK; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 182 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return VERSION_TOK; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 183 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return STATUS_TOK; }
	YY_BREAK
/* Attributes */
case 25:
YY_RULE_SETUP
#line 186 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return NAMED_ATTRIBUTE_TOK; }
	YY_BREAK
/* COMMANDS */
case 26:
YY_RULE_SETUP
#line 190 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return ASSERT_TOK; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 191 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return CHECK_SAT_TOK; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 192 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return CHECK_SAT_ASSUMING_TOK;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 193 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return DECLARE_CONST_TOK;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 194 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return DECLARE_FUNCTION_TOK; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 195 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return DECLARE_SORT_TOK;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 196 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return DEFINE_FUNCTION_TOK; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 197 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return DECLARE_FUN_REC_TOK;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 198 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return DECLARE_FUNS_REC_TOK;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 199 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return DEFINE_SORT_TOK;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 200 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return ECHO_TOK;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 201 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return EXIT_TOK;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 202 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return GET_ASSERTIONS_TOK;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 203 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return GET_ASSIGNMENT_TOK;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 204 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return GET_INFO_TOK;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 205 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return GET_MODEL_TOK;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 206 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return GET_OPTION_TOK;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 207 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return GET_PROOF_TOK;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 208 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return GET_UNSAT_ASSUMPTION_TOK;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 209 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return GET_UNSAT_CORE_TOK;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 210 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return GET_VALUE_TOK;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 211 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return POP_TOK;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 212 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return PUSH_TOK;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 213 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return RESET_TOK;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 214 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return RESET_ASSERTIONS_TOK;} 
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 215 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return NOTES_TOK;  }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 216 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return LOGIC_TOK; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 217 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return SET_OPTION_TOK; }
	YY_BREAK
/* Types for QF_BV and QF_ABV. */
case 54:
YY_RULE_SETUP
#line 222 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BITVEC_TOK;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 223 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return ARRAY_TOK;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 224 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BOOL_TOK;}
	YY_BREAK
/* CORE THEORY pg. 29 of the SMT-LIB2 standard 30-March-2010. */
case 57:
YY_RULE_SETUP
#line 228 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return TRUE_TOK; } 
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 229 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return FALSE_TOK; } 
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 230 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return NOT_TOK; } 
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 231 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return AND_TOK; } 
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 232 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return OR_TOK; } 
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 233 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return XOR_TOK;}  
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 234 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return ITE_TOK;} // PARAMETRIC 
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 235 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return EQ_TOK;} 
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 236 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return IMPLIES_TOK; } 
	YY_BREAK
/* CORE THEORY. But not on pg 29. */
case 66:
YY_RULE_SETUP
#line 239 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return DISTINCT_TOK; }  // variadic
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 240 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return LET_TOK; }
	YY_BREAK
/* Functions for QF_BV and QF_AUFBV.  */
case 68:
YY_RULE_SETUP
#line 243 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVLEFTSHIFT_1_TOK;} 
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 244 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVRIGHTSHIFT_1_TOK;} 
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 245 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVARITHRIGHTSHIFT_TOK;} 
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 246 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVPLUS_TOK;} 
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 247 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVSUB_TOK;} 
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 248 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVNOT_TOK;} 
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 249 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVMULT_TOK;} 
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 250 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVDIV_TOK;} 
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 251 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return SBVDIV_TOK;} 
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 252 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVMOD_TOK;}  
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 253 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return SBVREM_TOK;} 
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 254 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return SBVMOD_TOK;} 
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 255 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVNEG_TOK;} 
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 256 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVAND_TOK;} 
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 257 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVOR_TOK;} 
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 258 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVXOR_TOK;} 
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 259 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVNAND_TOK;} 
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 260 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVNOR_TOK;} 
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 261 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVXNOR_TOK;} 
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 262 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVCONCAT_TOK;} 
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 263 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVEXTRACT_TOK;} 
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 264 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVLT_TOK;} 
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 265 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVGT_TOK;} 
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 266 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVLE_TOK;} 
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 267 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVGE_TOK;} 
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 268 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVSLT_TOK;} 
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 269 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVSGT_TOK;} 
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 270 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVSLE_TOK;} 
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 271 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVSGE_TOK;} 
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 272 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVCOMP_TOK;} 
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 273 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVZX_TOK;} 
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 274 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVSX_TOK;}  
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 275 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVREPEAT_TOK;}  
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 276 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVROTATE_LEFT_TOK;} 
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 277 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return BVROTATE_RIGHT_TOK;}  
	YY_BREAK
/* Functions for QF_AUFBV. */
case 103:
YY_RULE_SETUP
#line 280 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return SELECT_TOK; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 281 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ return STORE_TOK; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 283 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{return lookup(smt2text);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 284 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{return lookup(smt2text);}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 286 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
{ smt2error("Illegal input character."); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 287 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"
ECHO;
	YY_BREAK
#line 1775 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/lexsmt2.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(STRING_LITERAL):
case YY_STATE_EOF(SYMBOL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed smt2in at a new source and called
			 * smt2lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = smt2in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( smt2wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * smt2text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of smt2lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					smt2realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			smt2restart(smt2in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) smt2realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
	yy_is_jam = (yy_current_state == 447);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					smt2restart(smt2in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( smt2wrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve smt2text */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    smt2lineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void smt2restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        smt2ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            smt2_create_buffer(smt2in,YY_BUF_SIZE );
	}

	smt2_init_buffer(YY_CURRENT_BUFFER,input_file );
	smt2_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void smt2_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		smt2pop_buffer_state();
	 *		smt2push_buffer_state(new_buffer);
     */
	smt2ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	smt2_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (smt2wrap()) processing, but the only time this flag
	 * is looked at is after smt2wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void smt2_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	smt2in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE smt2_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) smt2alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in smt2_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) smt2alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in smt2_create_buffer()" );

	b->yy_is_our_buffer = 1;

	smt2_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with smt2_create_buffer()
 * 
 */
    void smt2_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		smt2free((void *) b->yy_ch_buf  );

	smt2free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a smt2restart() or at EOF.
 */
    static void smt2_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	smt2_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then smt2_init_buffer was _probably_
     * called from smt2restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 1;

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void smt2_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		smt2_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void smt2push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	smt2ensure_buffer_stack();

	/* This block is copied from smt2_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from smt2_switch_to_buffer. */
	smt2_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void smt2pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	smt2_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		smt2_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void smt2ensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)smt2alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in smt2ensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)smt2realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in smt2ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE smt2_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) smt2alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in smt2_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	smt2_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to smt2lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       smt2_scan_bytes() instead.
 */
YY_BUFFER_STATE smt2_scan_string (yyconst char * yystr )
{
    
	return smt2_scan_bytes(yystr,(int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to smt2lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE smt2_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) _yybytes_len + 2;
	buf = (char *) smt2alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in smt2_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = smt2_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in smt2_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up smt2text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		smt2text[smt2leng] = (yy_hold_char); \
		(yy_c_buf_p) = smt2text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		smt2leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int smt2get_lineno  (void)
{
    
    return smt2lineno;
}

/** Get the input stream.
 * 
 */
FILE *smt2get_in  (void)
{
        return smt2in;
}

/** Get the output stream.
 * 
 */
FILE *smt2get_out  (void)
{
        return smt2out;
}

/** Get the length of the current token.
 * 
 */
int smt2get_leng  (void)
{
        return smt2leng;
}

/** Get the current token.
 * 
 */

char *smt2get_text  (void)
{
        return smt2text;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void smt2set_lineno (int  _line_number )
{
    
    smt2lineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see smt2_switch_to_buffer
 */
void smt2set_in (FILE *  _in_str )
{
        smt2in = _in_str ;
}

void smt2set_out (FILE *  _out_str )
{
        smt2out = _out_str ;
}

int smt2get_debug  (void)
{
        return smt2_flex_debug;
}

void smt2set_debug (int  _bdebug )
{
        smt2_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from smt2lex_destroy(), so don't allocate here.
     */

    /* We do not touch smt2lineno unless the option is enabled. */
    smt2lineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    smt2in = stdin;
    smt2out = stdout;
#else
    smt2in = NULL;
    smt2out = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * smt2lex_init()
     */
    return 0;
}

/* smt2lex_destroy is for both reentrant and non-reentrant scanners. */
int smt2lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		smt2_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		smt2pop_buffer_state();
	}

	/* Destroy the stack itself. */
	smt2free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * smt2lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *smt2alloc (yy_size_t  size )
{
			return malloc(size);
}

void *smt2realloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void smt2free (void * ptr )
{
			free( (char *) ptr );	/* see smt2realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 287 "/home/map2check/devel_tool/map_src_on_docker/dependencies/stp/lib/Parser/smt2.lex"



