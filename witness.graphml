<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry">
		<default>false</default>
	</key>
	<key attr.name="invariant" attr.type="string" for="node" id="invariant"/>
	<key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/>
	<key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/>
	<key attr.name="producer" attr.type="string" for="graph" id="producer"/>
	<key attr.name="specification" attr.type="string" for="graph" id="specification"/>
	<key attr.name="programFile" attr.type="string" for="graph" id="programfile"/>
	<key attr.name="programHash" attr.type="string" for="graph" id="programhash"/>
	<key attr.name="architecture" attr.type="string" for="graph" id="architecture"/>
	<key attr.name="startline" attr.type="int" for="edge" id="startline"/>
	<key attr.name="sourcecode" attr.type="string" for="edge" id="sourcecode"/>
	<key attr.name="control" attr.type="string" for="edge" id="control"/>
	<key attr.name="assumption" attr.type="string" for="edge" id="assumption"/>
	<key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/>
	<key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/>
	<graph edgedefault="directed">
		<data key="witness-type">correctness_witness</data>
		<data key="sourcecodelang">C</data>
		<data key="producer">Map2Check</data>
		<data key="specification">CHECK( init(main()), LTL(G ! overflow) )</data>
		<data key="programfile">test/nooverflow/parity_true-unreach-call_true-no-overflow.i</data>
		<data key="programhash">1de4b71c160b63eb5d44a8d7bb23d6faff671aec</data>
		<data key="architecture">32bit</data>
		<node id="s0">
			<data key="entry">true</data>
		</node>
		<node id="s1"/>
		<node id="s2"/>
		<node id="s3"/>
		<node id="s4"/>
		<node id="s5"/>
		<node id="s6"/>
		<node id="s7"/>
		<node id="s8"/>
		<node id="s9"/>
		<node id="s10"/>
		<node id="s11"/>
		<node id="s12"/>
		<node id="s13"/>
		<node id="s14"/>
		<node id="s15"/>
		<node id="s16"/>
		<node id="s17"/>
		<node id="s18"/>
		<edge source="s0" target="s1">
			<data key="startline">23</data>
			<data key="sourcecode">    unsigned int v = __VERIFIER_nondet_uint();</data>
		</edge>
		<edge source="s1" target="s2">
			<data key="startline">24</data>
			<data key="sourcecode">    unsigned int v1;</data>
		</edge>
		<edge source="s2" target="s3">
			<data key="startline">25</data>
			<data key="sourcecode">    unsigned int v2;</data>
		</edge>
		<edge source="s3" target="s4">
			<data key="startline">26</data>
			<data key="sourcecode">    char parity1;</data>
		</edge>
		<edge source="s4" target="s5">
			<data key="startline">27</data>
			<data key="sourcecode">    char parity2;</data>
		</edge>
		<edge source="s5" target="s6">
			<data key="startline">29</data>
			<data key="sourcecode">    parity1 = (char)0;</data>
		</edge>
		<edge source="s6" target="s7">
			<data key="startline">30</data>
			<data key="sourcecode">[v1 != 0]</data>
			<data key="control">condition-true</data>
		</edge>
		<edge source="s7" target="s8">
			<data key="startline">31</data>
			<data key="sourcecode">[ == 0]</data>
			<data key="control">condition-true</data>
		</edge>
		<edge source="s8" target="s9">
			<data key="startline">32</data>
			<data key="sourcecode">            parity1 = (char)1;</data>
		</edge>
		<edge source="s9" target="s10">
			<data key="startline">36</data>
			<data key="sourcecode">        v1 = v1 &amp; (v1 - 1U);</data>
		</edge>
		<edge source="s10" target="s11">
			<data key="startline">34</data>
			<data key="sourcecode">            parity1 = (char)0;</data>
		</edge>
		<edge source="s11" target="s12">
			<data key="startline">43</data>
			<data key="sourcecode">[ == 0]</data>
			<data key="control">condition-true</data>
		</edge>
		<edge source="s12" target="s13">
			<data key="startline">44</data>
			<data key="sourcecode">        parity2 = (char)0;</data>
		</edge>
		<edge source="s13" target="s14">
			<data key="startline">48</data>
			<data key="sourcecode">    __VERIFIER_assert(parity1 == parity2);</data>
		</edge>
		<edge source="s14" target="s15">
			<data key="startline">5</data>
			<data key="sourcecode">[![ !0]]</data>
			<data key="control">condition-false</data>
		</edge>
		<edge source="s15" target="s16">
			<data key="startline">5</data>
			<data key="sourcecode">[ !0]</data>
			<data key="control">condition-true</data>
		</edge>
		<edge source="s16" target="s17">
			<data key="startline">8</data>
			<data key="sourcecode">  return;</data>
		</edge>
		<edge source="s17" target="s18">
			<data key="startline">49</data>
			<data key="sourcecode">    return 0;</data>
		</edge>
	</graph>
</graphml>